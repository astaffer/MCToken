/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MastercardApi.Client.Client;
using MastercardApi.Client.Model;

namespace MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetEligibleTokenRequestorsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </remarks>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <returns>GetEligibleTokenRequestorsResponse</returns>
        GetEligibleTokenRequestorsResponse GetEligibleTokenRequestors(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest));

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </remarks>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <returns>ApiResponse of GetEligibleTokenRequestorsResponse</returns>
        ApiResponse<GetEligibleTokenRequestorsResponse> GetEligibleTokenRequestorsWithHttpInfo(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetEligibleTokenRequestorsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </remarks>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEligibleTokenRequestorsResponse</returns>
        System.Threading.Tasks.Task<GetEligibleTokenRequestorsResponse> GetEligibleTokenRequestorsAsync(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </remarks>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEligibleTokenRequestorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEligibleTokenRequestorsResponse>> GetEligibleTokenRequestorsWithHttpInfoAsync(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetEligibleTokenRequestorsApi : IGetEligibleTokenRequestorsApiSync, IGetEligibleTokenRequestorsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetEligibleTokenRequestorsApi : IGetEligibleTokenRequestorsApi
    {
        private MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleTokenRequestorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetEligibleTokenRequestorsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleTokenRequestorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetEligibleTokenRequestorsApi(string basePath)
        {
            this.Configuration = MastercardApi.Client.Client.Configuration.MergeConfigurations(
                MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleTokenRequestorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetEligibleTokenRequestorsApi(MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MastercardApi.Client.Client.Configuration.MergeConfigurations(
                MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEligibleTokenRequestorsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GetEligibleTokenRequestorsApi(MastercardApi.Client.Client.ISynchronousClient client, MastercardApi.Client.Client.IAsynchronousClient asyncClient, MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </summary>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <returns>GetEligibleTokenRequestorsResponse</returns>
        public GetEligibleTokenRequestorsResponse GetEligibleTokenRequestors(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest))
        {
            MastercardApi.Client.Client.ApiResponse<GetEligibleTokenRequestorsResponse> localVarResponse = GetEligibleTokenRequestorsWithHttpInfo(getEligibleTokenRequestorsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </summary>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <returns>ApiResponse of GetEligibleTokenRequestorsResponse</returns>
        public MastercardApi.Client.Client.ApiResponse<GetEligibleTokenRequestorsResponse> GetEligibleTokenRequestorsWithHttpInfo(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest))
        {
            MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new MastercardApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getEligibleTokenRequestorsRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEligibleTokenRequestorsResponse>("/connect/1/0/getEligibleTokenRequestors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleTokenRequestors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </summary>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEligibleTokenRequestorsResponse</returns>
        public async System.Threading.Tasks.Task<GetEligibleTokenRequestorsResponse> GetEligibleTokenRequestorsAsync(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MastercardApi.Client.Client.ApiResponse<GetEligibleTokenRequestorsResponse> localVarResponse = await GetEligibleTokenRequestorsWithHttpInfoAsync(getEligibleTokenRequestorsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about Token Requestors that have been enabled for one or more of the issuer&#39;s account ranges This API is used to retrieve information about Token Requestors that have been enabled for one or more of the Issuer&#39;s account ranges. The information returned is cached by Issuer back-end servers. The Issuer typically uses this information to present to their cardholders the list of available Token Requestors they can push their card (or account) to, both for web-based and app-based user interfaces. Note: all Token Requestors enabled for the account range(s) are returned, regardless whether they support MDES Token Connect or not. The Issuer can easily determine from the response the Token Requestors that support the MDES Token Connect framework. 
        /// </summary>
        /// <exception cref="MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEligibleTokenRequestorsRequest">Contains the details of the request message. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEligibleTokenRequestorsResponse)</returns>
        public async System.Threading.Tasks.Task<MastercardApi.Client.Client.ApiResponse<GetEligibleTokenRequestorsResponse>> GetEligibleTokenRequestorsWithHttpInfoAsync(GetEligibleTokenRequestorsRequest getEligibleTokenRequestorsRequest = default(GetEligibleTokenRequestorsRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new MastercardApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getEligibleTokenRequestorsRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEligibleTokenRequestorsResponse>("/connect/1/0/getEligibleTokenRequestors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleTokenRequestors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

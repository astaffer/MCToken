/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// EncryptedPayload
    /// </summary>
    [DataContract(Name = "EncryptedPayload")]
    public partial class EncryptedPayload : IEquatable<EncryptedPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EncryptedPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedPayload" /> class.
        /// </summary>
        /// <param name="encryptedData">encryptedData (required).</param>
        /// <param name="publicKeyFingerprint">Refer to Breaking the Encrypted Payload Down &gt; [publicKeyFingerprint](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down) (required).</param>
        /// <param name="encryptedKey">Refer to Breaking the Encrypted Payload Down &gt; [encryptedKey](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down) (required).</param>
        /// <param name="oaepHashingAlgorithm">Refer to Breaking the Encrypted Payload Down &gt; [oaepPaddingDigestAlgorithm](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down).</param>
        /// <param name="iv">Refer to Breaking the Encrypted Payload Down &gt; [iv](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down).</param>
        public EncryptedPayload(FundingAccount encryptedData = default(FundingAccount), string publicKeyFingerprint = default(string), string encryptedKey = default(string), string oaepHashingAlgorithm = default(string), string iv = default(string))
        {
            // to ensure "encryptedData" is required (not null)
            if (encryptedData == null) {
                throw new ArgumentNullException("encryptedData is a required property for EncryptedPayload and cannot be null");
            }
            this.EncryptedData = encryptedData;
            // to ensure "publicKeyFingerprint" is required (not null)
            if (publicKeyFingerprint == null) {
                throw new ArgumentNullException("publicKeyFingerprint is a required property for EncryptedPayload and cannot be null");
            }
            this.PublicKeyFingerprint = publicKeyFingerprint;
            // to ensure "encryptedKey" is required (not null)
            if (encryptedKey == null) {
                throw new ArgumentNullException("encryptedKey is a required property for EncryptedPayload and cannot be null");
            }
            this.EncryptedKey = encryptedKey;
            this.OaepHashingAlgorithm = oaepHashingAlgorithm;
            this.Iv = iv;
        }

        /// <summary>
        /// Gets or Sets EncryptedData
        /// </summary>
        [DataMember(Name = "encryptedData", IsRequired = true, EmitDefaultValue = false)]
        public FundingAccount EncryptedData { get; set; }

        /// <summary>
        /// Refer to Breaking the Encrypted Payload Down &gt; [publicKeyFingerprint](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)
        /// </summary>
        /// <value>Refer to Breaking the Encrypted Payload Down &gt; [publicKeyFingerprint](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)</value>
        [DataMember(Name = "publicKeyFingerprint", IsRequired = true, EmitDefaultValue = false)]
        public string PublicKeyFingerprint { get; set; }

        /// <summary>
        /// Refer to Breaking the Encrypted Payload Down &gt; [encryptedKey](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)
        /// </summary>
        /// <value>Refer to Breaking the Encrypted Payload Down &gt; [encryptedKey](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)</value>
        [DataMember(Name = "encryptedKey", IsRequired = true, EmitDefaultValue = false)]
        public string EncryptedKey { get; set; }

        /// <summary>
        /// Refer to Breaking the Encrypted Payload Down &gt; [oaepPaddingDigestAlgorithm](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)
        /// </summary>
        /// <value>Refer to Breaking the Encrypted Payload Down &gt; [oaepPaddingDigestAlgorithm](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)</value>
        [DataMember(Name = "oaepHashingAlgorithm", EmitDefaultValue = false)]
        public string OaepHashingAlgorithm { get; set; }

        /// <summary>
        /// Refer to Breaking the Encrypted Payload Down &gt; [iv](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)
        /// </summary>
        /// <value>Refer to Breaking the Encrypted Payload Down &gt; [iv](https://developer.mastercard.com/platform/documentation/security-and-authentication/securing-sensitive-data-using-payload-encryption/#breaking-the-encrypted-payload-down)</value>
        [DataMember(Name = "iv", EmitDefaultValue = false)]
        public string Iv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncryptedPayload {\n");
            sb.Append("  EncryptedData: ").Append(EncryptedData).Append("\n");
            sb.Append("  PublicKeyFingerprint: ").Append(PublicKeyFingerprint).Append("\n");
            sb.Append("  EncryptedKey: ").Append(EncryptedKey).Append("\n");
            sb.Append("  OaepHashingAlgorithm: ").Append(OaepHashingAlgorithm).Append("\n");
            sb.Append("  Iv: ").Append(Iv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncryptedPayload);
        }

        /// <summary>
        /// Returns true if EncryptedPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EncryptedPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncryptedPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EncryptedData == input.EncryptedData ||
                    (this.EncryptedData != null &&
                    this.EncryptedData.Equals(input.EncryptedData))
                ) && 
                (
                    this.PublicKeyFingerprint == input.PublicKeyFingerprint ||
                    (this.PublicKeyFingerprint != null &&
                    this.PublicKeyFingerprint.Equals(input.PublicKeyFingerprint))
                ) && 
                (
                    this.EncryptedKey == input.EncryptedKey ||
                    (this.EncryptedKey != null &&
                    this.EncryptedKey.Equals(input.EncryptedKey))
                ) && 
                (
                    this.OaepHashingAlgorithm == input.OaepHashingAlgorithm ||
                    (this.OaepHashingAlgorithm != null &&
                    this.OaepHashingAlgorithm.Equals(input.OaepHashingAlgorithm))
                ) && 
                (
                    this.Iv == input.Iv ||
                    (this.Iv != null &&
                    this.Iv.Equals(input.Iv))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EncryptedData != null)
                    hashCode = hashCode * 59 + this.EncryptedData.GetHashCode();
                if (this.PublicKeyFingerprint != null)
                    hashCode = hashCode * 59 + this.PublicKeyFingerprint.GetHashCode();
                if (this.EncryptedKey != null)
                    hashCode = hashCode * 59 + this.EncryptedKey.GetHashCode();
                if (this.OaepHashingAlgorithm != null)
                    hashCode = hashCode * 59 + this.OaepHashingAlgorithm.GetHashCode();
                if (this.Iv != null)
                    hashCode = hashCode * 59 + this.Iv.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// The content of the media. When the Asset corresponds to a Token Requestor&#39;s logo, the content is a square image.
    /// </summary>
    [DataContract(Name = "MediaContent")]
    public partial class MediaContent : IEquatable<MediaContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediaContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaContent" /> class.
        /// </summary>
        /// <param name="type">What type of media this is. __Max Length:__ 32. Specified as a MIME type, which will be one of the following supported types:  * \&quot;application/pdf\&quot;: for images (must be a vector PDF image)  * \&quot;image/png\&quot;: includes alpha channel  * \&quot;image/svg+xml\&quot;: image in SVG format  * \&quot;text/plain\&quot;  * \&quot;text/html\&quot;  (required).</param>
        /// <param name="data">The data for this item of media. Base64-encoded data, where the decoded data is in the format as specified in ‘type&#39;.  (required).</param>
        /// <param name="height">For non-SVG image assets, the height of the image. Specified in pixels. __Max Length:__ 6. .</param>
        /// <param name="width">For non-SVG image assets, the width of the image. Specified in pixels. __Max Length:__ 6. .</param>
        public MediaContent(string type = default(string), string data = default(string), string height = default(string), string width = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for MediaContent and cannot be null");
            }
            this.Type = type;
            // to ensure "data" is required (not null)
            if (data == null) {
                throw new ArgumentNullException("data is a required property for MediaContent and cannot be null");
            }
            this.Data = data;
            this.Height = height;
            this.Width = width;
        }

        /// <summary>
        /// What type of media this is. __Max Length:__ 32. Specified as a MIME type, which will be one of the following supported types:  * \&quot;application/pdf\&quot;: for images (must be a vector PDF image)  * \&quot;image/png\&quot;: includes alpha channel  * \&quot;image/svg+xml\&quot;: image in SVG format  * \&quot;text/plain\&quot;  * \&quot;text/html\&quot; 
        /// </summary>
        /// <value>What type of media this is. __Max Length:__ 32. Specified as a MIME type, which will be one of the following supported types:  * \&quot;application/pdf\&quot;: for images (must be a vector PDF image)  * \&quot;image/png\&quot;: includes alpha channel  * \&quot;image/svg+xml\&quot;: image in SVG format  * \&quot;text/plain\&quot;  * \&quot;text/html\&quot; </value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The data for this item of media. Base64-encoded data, where the decoded data is in the format as specified in ‘type&#39;. 
        /// </summary>
        /// <value>The data for this item of media. Base64-encoded data, where the decoded data is in the format as specified in ‘type&#39;. </value>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// For non-SVG image assets, the height of the image. Specified in pixels. __Max Length:__ 6. 
        /// </summary>
        /// <value>For non-SVG image assets, the height of the image. Specified in pixels. __Max Length:__ 6. </value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public string Height { get; set; }

        /// <summary>
        /// For non-SVG image assets, the width of the image. Specified in pixels. __Max Length:__ 6. 
        /// </summary>
        /// <value>For non-SVG image assets, the width of the image. Specified in pixels. __Max Length:__ 6. </value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public string Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaContent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaContent);
        }

        /// <summary>
        /// Returns true if MediaContent instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaContent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

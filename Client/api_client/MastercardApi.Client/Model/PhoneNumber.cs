/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// PhoneNumber
    /// </summary>
    [DataContract(Name = "PhoneNumber")]
    public partial class PhoneNumber : IEquatable<PhoneNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumber" /> class.
        /// </summary>
        /// <param name="countryDialInCode">The international dial-in prefix code associated with the country. For instance: \&quot;1\&quot; for USA, \&quot;44\&quot; for UK, etc. __Max length:__ 4. __Data Type:__ String (Numeric).  (required).</param>
        /// <param name="phoneNumber">The Phone number to be dialed after the international prefix – hence, excluding any domestic prefix if any. __Max length:__ 20. __Data Type:__ String (Numeric).  (required).</param>
        public PhoneNumber(string countryDialInCode = default(string), string phoneNumber = default(string))
        {
            // to ensure "countryDialInCode" is required (not null)
            if (countryDialInCode == null) {
                throw new ArgumentNullException("countryDialInCode is a required property for PhoneNumber and cannot be null");
            }
            this.CountryDialInCode = countryDialInCode;
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null) {
                throw new ArgumentNullException("phoneNumber is a required property for PhoneNumber and cannot be null");
            }
            this._PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// The international dial-in prefix code associated with the country. For instance: \&quot;1\&quot; for USA, \&quot;44\&quot; for UK, etc. __Max length:__ 4. __Data Type:__ String (Numeric). 
        /// </summary>
        /// <value>The international dial-in prefix code associated with the country. For instance: \&quot;1\&quot; for USA, \&quot;44\&quot; for UK, etc. __Max length:__ 4. __Data Type:__ String (Numeric). </value>
        [DataMember(Name = "countryDialInCode", IsRequired = true, EmitDefaultValue = false)]
        public string CountryDialInCode { get; set; }

        /// <summary>
        /// The Phone number to be dialed after the international prefix – hence, excluding any domestic prefix if any. __Max length:__ 20. __Data Type:__ String (Numeric). 
        /// </summary>
        /// <value>The Phone number to be dialed after the international prefix – hence, excluding any domestic prefix if any. __Max length:__ 20. __Data Type:__ String (Numeric). </value>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = false)]
        public string _PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneNumber {\n");
            sb.Append("  CountryDialInCode: ").Append(CountryDialInCode).Append("\n");
            sb.Append("  _PhoneNumber: ").Append(_PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneNumber);
        }

        /// <summary>
        /// Returns true if PhoneNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryDialInCode == input.CountryDialInCode ||
                    (this.CountryDialInCode != null &&
                    this.CountryDialInCode.Equals(input.CountryDialInCode))
                ) && 
                (
                    this._PhoneNumber == input._PhoneNumber ||
                    (this._PhoneNumber != null &&
                    this._PhoneNumber.Equals(input._PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryDialInCode != null)
                    hashCode = hashCode * 59 + this.CountryDialInCode.GetHashCode();
                if (this._PhoneNumber != null)
                    hashCode = hashCode * 59 + this._PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

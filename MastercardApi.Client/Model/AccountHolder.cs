/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// AccountHolder
    /// </summary>
    [DataContract(Name = "AccountHolder")]
    public partial class AccountHolder : IEquatable<AccountHolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountHolder" /> class.
        /// </summary>
        /// <param name="accountHolderName">__Optional.__ The name of the account holder in the format LASTNAME/FIRSTNAME or FIRSTNAME LASTNAME. __Max length:__ 27. __Data Type:__ String. .</param>
        /// <param name="accountHolderAddress">accountHolderAddress.</param>
        /// <param name="accountHolderEmailAddress">__Optional.__ The e-mail address of the account holder. __Max length:__ 320. __Data Type:__ String. .</param>
        /// <param name="accountHolderMobilePhoneNumber">accountHolderMobilePhoneNumber.</param>
        public AccountHolder(string accountHolderName = default(string), BillingAddress accountHolderAddress = default(BillingAddress), string accountHolderEmailAddress = default(string), PhoneNumber accountHolderMobilePhoneNumber = default(PhoneNumber))
        {
            this.AccountHolderName = accountHolderName;
            this.AccountHolderAddress = accountHolderAddress;
            this.AccountHolderEmailAddress = accountHolderEmailAddress;
            this.AccountHolderMobilePhoneNumber = accountHolderMobilePhoneNumber;
        }

        /// <summary>
        /// __Optional.__ The name of the account holder in the format LASTNAME/FIRSTNAME or FIRSTNAME LASTNAME. __Max length:__ 27. __Data Type:__ String. 
        /// </summary>
        /// <value>__Optional.__ The name of the account holder in the format LASTNAME/FIRSTNAME or FIRSTNAME LASTNAME. __Max length:__ 27. __Data Type:__ String. </value>
        [DataMember(Name = "accountHolderName", EmitDefaultValue = false)]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolderAddress
        /// </summary>
        [DataMember(Name = "accountHolderAddress", EmitDefaultValue = false)]
        public BillingAddress AccountHolderAddress { get; set; }

        /// <summary>
        /// __Optional.__ The e-mail address of the account holder. __Max length:__ 320. __Data Type:__ String. 
        /// </summary>
        /// <value>__Optional.__ The e-mail address of the account holder. __Max length:__ 320. __Data Type:__ String. </value>
        [DataMember(Name = "accountHolderEmailAddress", EmitDefaultValue = false)]
        public string AccountHolderEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolderMobilePhoneNumber
        /// </summary>
        [DataMember(Name = "accountHolderMobilePhoneNumber", EmitDefaultValue = false)]
        public PhoneNumber AccountHolderMobilePhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountHolder {\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  AccountHolderAddress: ").Append(AccountHolderAddress).Append("\n");
            sb.Append("  AccountHolderEmailAddress: ").Append(AccountHolderEmailAddress).Append("\n");
            sb.Append("  AccountHolderMobilePhoneNumber: ").Append(AccountHolderMobilePhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountHolder);
        }

        /// <summary>
        /// Returns true if AccountHolder instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountHolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountHolder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountHolderName == input.AccountHolderName ||
                    (this.AccountHolderName != null &&
                    this.AccountHolderName.Equals(input.AccountHolderName))
                ) && 
                (
                    this.AccountHolderAddress == input.AccountHolderAddress ||
                    (this.AccountHolderAddress != null &&
                    this.AccountHolderAddress.Equals(input.AccountHolderAddress))
                ) && 
                (
                    this.AccountHolderEmailAddress == input.AccountHolderEmailAddress ||
                    (this.AccountHolderEmailAddress != null &&
                    this.AccountHolderEmailAddress.Equals(input.AccountHolderEmailAddress))
                ) && 
                (
                    this.AccountHolderMobilePhoneNumber == input.AccountHolderMobilePhoneNumber ||
                    (this.AccountHolderMobilePhoneNumber != null &&
                    this.AccountHolderMobilePhoneNumber.Equals(input.AccountHolderMobilePhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountHolderName != null)
                    hashCode = hashCode * 59 + this.AccountHolderName.GetHashCode();
                if (this.AccountHolderAddress != null)
                    hashCode = hashCode * 59 + this.AccountHolderAddress.GetHashCode();
                if (this.AccountHolderEmailAddress != null)
                    hashCode = hashCode * 59 + this.AccountHolderEmailAddress.GetHashCode();
                if (this.AccountHolderMobilePhoneNumber != null)
                    hashCode = hashCode * 59 + this.AccountHolderMobilePhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

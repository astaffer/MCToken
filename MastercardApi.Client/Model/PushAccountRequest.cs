/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// PushAccountRequest
    /// </summary>
    [DataContract(Name = "PushAccountRequest")]
    public partial class PushAccountRequest : IEquatable<PushAccountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushAccountRequest" /> class.
        /// </summary>
        /// <param name="requestId">Unique identifier for the request.  __Max Length:__ 64  (required).</param>
        /// <param name="pushFundingAccount">pushFundingAccount (required).</param>
        /// <param name="tokenRequestorId">Identifies the Token Requestor __Length:__ 11  (required).</param>
        public PushAccountRequest(string requestId = default(string), PushFundingAccount pushFundingAccount = default(PushFundingAccount), string tokenRequestorId = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null) {
                throw new ArgumentNullException("requestId is a required property for PushAccountRequest and cannot be null");
            }
            this.RequestId = requestId;
            // to ensure "pushFundingAccount" is required (not null)
            if (pushFundingAccount == null) {
                throw new ArgumentNullException("pushFundingAccount is a required property for PushAccountRequest and cannot be null");
            }
            this.PushFundingAccount = pushFundingAccount;
            // to ensure "tokenRequestorId" is required (not null)
            if (tokenRequestorId == null) {
                throw new ArgumentNullException("tokenRequestorId is a required property for PushAccountRequest and cannot be null");
            }
            this.TokenRequestorId = tokenRequestorId;
        }

        /// <summary>
        /// Unique identifier for the request.  __Max Length:__ 64 
        /// </summary>
        /// <value>Unique identifier for the request.  __Max Length:__ 64 </value>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets PushFundingAccount
        /// </summary>
        [DataMember(Name = "pushFundingAccount", IsRequired = true, EmitDefaultValue = false)]
        public PushFundingAccount PushFundingAccount { get; set; }

        /// <summary>
        /// Identifies the Token Requestor __Length:__ 11 
        /// </summary>
        /// <value>Identifies the Token Requestor __Length:__ 11 </value>
        [DataMember(Name = "tokenRequestorId", IsRequired = true, EmitDefaultValue = false)]
        public string TokenRequestorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushAccountRequest {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  PushFundingAccount: ").Append(PushFundingAccount).Append("\n");
            sb.Append("  TokenRequestorId: ").Append(TokenRequestorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushAccountRequest);
        }

        /// <summary>
        /// Returns true if PushAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PushAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushAccountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.PushFundingAccount == input.PushFundingAccount ||
                    (this.PushFundingAccount != null &&
                    this.PushFundingAccount.Equals(input.PushFundingAccount))
                ) && 
                (
                    this.TokenRequestorId == input.TokenRequestorId ||
                    (this.TokenRequestorId != null &&
                    this.TokenRequestorId.Equals(input.TokenRequestorId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.PushFundingAccount != null)
                    hashCode = hashCode * 59 + this.PushFundingAccount.GetHashCode();
                if (this.TokenRequestorId != null)
                    hashCode = hashCode * 59 + this.TokenRequestorId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

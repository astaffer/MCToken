/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. 
 *
 * The version of the OpenAPI document: 2.03
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MastercardApi.Client.Client.OpenAPIDateConverter;

namespace MastercardApi.Client.Model
{
    /// <summary>
    /// PushMethod
    /// </summary>
    [DataContract(Name = "PushMethod")]
    public partial class PushMethod : IEquatable<PushMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMethod" /> class.
        /// </summary>
        /// <param name="type">The push method type corresponding to the URI supported by the Token Requestor. The array is absent if the Token Requestor does not support MDES Token Connect. __Max Length:__ 32 Possible values are:  * \&quot;ANDROID\&quot;: The URI is an Android app intent.  * \&quot;IOS\&quot;: The URI is an iOS app intent.  * \&quot;WEB\&quot;: The URI is a browser URL.  (required).</param>
        /// <param name="uri">The URI to open the Token Requestor&#39;s application or website. Please refer to the Issuer Interface Implementation Guide for the detail of how to send the data to the Token Requestor. __Max Length:__ 128  (required).</param>
        public PushMethod(string type = default(string), string uri = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null) {
                throw new ArgumentNullException("type is a required property for PushMethod and cannot be null");
            }
            this.Type = type;
            // to ensure "uri" is required (not null)
            if (uri == null) {
                throw new ArgumentNullException("uri is a required property for PushMethod and cannot be null");
            }
            this.Uri = uri;
        }

        /// <summary>
        /// The push method type corresponding to the URI supported by the Token Requestor. The array is absent if the Token Requestor does not support MDES Token Connect. __Max Length:__ 32 Possible values are:  * \&quot;ANDROID\&quot;: The URI is an Android app intent.  * \&quot;IOS\&quot;: The URI is an iOS app intent.  * \&quot;WEB\&quot;: The URI is a browser URL. 
        /// </summary>
        /// <value>The push method type corresponding to the URI supported by the Token Requestor. The array is absent if the Token Requestor does not support MDES Token Connect. __Max Length:__ 32 Possible values are:  * \&quot;ANDROID\&quot;: The URI is an Android app intent.  * \&quot;IOS\&quot;: The URI is an iOS app intent.  * \&quot;WEB\&quot;: The URI is a browser URL. </value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The URI to open the Token Requestor&#39;s application or website. Please refer to the Issuer Interface Implementation Guide for the detail of how to send the data to the Token Requestor. __Max Length:__ 128 
        /// </summary>
        /// <value>The URI to open the Token Requestor&#39;s application or website. Please refer to the Issuer Interface Implementation Guide for the detail of how to send the data to the Token Requestor. __Max Length:__ 128 </value>
        [DataMember(Name = "uri", IsRequired = true, EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PushMethod {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PushMethod);
        }

        /// <summary>
        /// Returns true if PushMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PushMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PushMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
